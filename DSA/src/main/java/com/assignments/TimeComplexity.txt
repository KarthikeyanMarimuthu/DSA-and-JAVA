1.

for (int i = 1; i <= n; i += 2) {
    System.out.print(i);
}

Explanation:

N = 10

i     iter

1      1
3      1
5      1
7      1
9      1
    =  5 = (N/2)  = N * (1/2)

    Ans: O(N)


2.

void solve(int N, int M) {
    for (int i = 1; i <= N; i++) {
        if (N % i == 0)
            cout << i << endl;
    }
    for (int i = 1; i <= M; i++) {
        if (M % i == 0)
            cout << i << endl;
    }
}

Ans : O(N + M)



3.
static int func(int n) {
      int s = 0;
      for (int i = 1; i <= 100; i++) {
          s += i;
      }
      return s;
  }


  Explanation if the Iterations are with any Constant Numbers, the Ans is always O(1)

  Ans : O(1)


  4.

  static int func(int n) {
        int s = 0;
        for (int i = 1; i <= 100; i++) {
            s += i;
        }
        return s;
    }


    N = 10

    i      j                                 iter

    0      0                                 1
    1      0 + 1                             2
    2      0 + 1 +2                          3
    3      0 + 1 + 2 +3                      4
    4      0 + 1 + 2 + 3 +4                  5
                                         =  Sum of N natural numbers = N (N +1)/2 = (N^2 + N) / 2

                                         Ans : O(N^2)



    5.

    for (int i = 1; i <= n; i *= 2) {
        for (int j = 1; j <= n; j++) {
            System.out.print(i + j + " ");
        }
        System.out.println();
    }


Explanation

If iterations is multipling by 2 alway it is lograthimic, then it is (log N)

Ans : O (N (log N))


    6.

    int a = 0, i = N;
    while (i) {
        a = a + i;
        i = i / 2;
    }


    Explanation

    If the iterations id dividing by 2 , always it is lograthimic

    Ans : O (log n)

    7.

    for (int i = 1; i <= 100; i *= 2) {
        for (int j = 1; j <= n; j++) {
            System.out.print(i + j + " ");
        }
        System.out.println();
    }


    Explanation

      i      j

      1      N
      2      N
      4      N
      8      N
      16     N
      32     N
      64     N

           8 N

           Ans : O (N)



    8.

    static int func(int n) {
        int s = 0;
        for (int i = 0; i < n; i = i * 2) {
            s += i;
        }
        return s;
    }


    Explanation

    i will be zero always after every iteration bcoz of multiplying by 0

    Ans: O (inifinty)


    9.

    int count =0;
    while(N > 0){
        count++;
        N/=3;
    }

    Ans : O (logN base3)


    10.

    public void solve() {
        int i = 1;
        while (i < n) {
            int x = i;
            while (x > 0) {
                x-=1;
            }
            i++;
        }
    }


        N = 10

        i      j                                 iter

        1      1                                 1
        2      2 + 1                             2
        3      3 + 2 + 1                         3
        4      4 + 3 + 2 +1                      4
        5      5 + 4 + 3 + 2+ 1                  5
                                             =  Sum of N natural numbers = N (N +1)/2 = (N^2 + N) / 2

                                             Ans : O(N^2)
    Ans : sum of first N natural numbers

    O (N^2)


    11.

    for (int i = 0; i < N; i++) {
      for (int j = i; j < N; j++) {
         break;
      }
    }


Explanation

Inner loop will not execute bcoz it will break immediately.

Ans : O(N)


12.

int a = 0;
for (int i = 0; i < N; i++) {
    for (int j = N; j > i; --j) {
        a += i + j;
    }
}

Ans : O (N * N)

