1.

What is the time complexity of the following code snippet

int func(int n){

int s = 0;

for(int i = 1 ; i*i*i <= n ; i++){

s = s + i;

}

return s;

}

Ans : O(n^(1/3))

2.

int ans = 0;
for (int i = 0; i < n; i++) {
    ans += i * i;
}
return ans;


Ans : O(n)


3.

What is the time complexity of the following code snippet

for(int i = 1 ; i <= n ; i++){

for(int j = 1 ; j <= 3^i ; j++){

print(i + j);

}

}

i     j     iteration

1     3^1   3
2     3^2   9
3     3^3   27

N     3^N

Ans : 3^N


4. If an algorithm has a time complexity of O(1), then the complexity of it is ?

Ans : constant

5. If for an algorithm time complexity is given by O(log2n) then complexity will:

Ans : logarthimic

6. If an algorithm has a time complexity of O(n), then the complexity of it is ?

 Ans : Linear

 7. If for an algorithm time complexity is given by O((3/2)^n) then complexity will:

 Ans : Exponential

 8.

 int a = 0, b = 0;
 for (i = 0; i < N; i++) {
     for (j = 0; j  < N; j++) {
         a = a + j;
     }
 }
 for (k = 0; k &lt; N; k++) {
     b = b + k;
 }

Ans : O (N^2)

9.

public void solve(int N) {
    for(int i = 0; i < Math.pow(2,N); i++) {
        int j = i;
        while(j > 0){
            j -= 1;
        }
    }
}

i       j       iter

0       0       1
1       1       1
2       2+1     2
3       3+2+1   3
.
.

        Sum of N natural numbers where n = 2^N = 2^N (2^N + 1) / 2

        Ans : O (4N^2)



10.
public void function (int n) {
    while (n > 0) {
        n++;
        n -= 2;
    }
}

Ans : O (N)



11.

for(int i = 0; i < n; i++){

    for(int j = i - 1; j >= 0; j++){

            ans += i + j ;

    }

}


Explanation

If i = 2 , j becomes 1 and the innner loop will start runing infinitely

Ans : Code will run indefinitely


12.

int sum = 0;
for(int i = 0; i <= N; i ++){
   for(int j = i; j <= N && j > i; j++){
      sum += i;
   }
}

Explanation

Inner loop condition will fail always

so Ans: O(N)
